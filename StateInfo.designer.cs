#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace William_Chamness_206_Assignment_3
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StateInfoDatabase")]
	public partial class StateInfoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTable(Table instance);
    partial void UpdateTable(Table instance);
    partial void DeleteTable(Table instance);
    #endregion
		
		public StateInfoDataContext() : 
				base(global::William_Chamness_206_Assignment_3.Properties.Settings.Default.StateInfoDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StateInfoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StateInfoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StateInfoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StateInfoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Table> Tables
		{
			get
			{
				return this.GetTable<Table>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Table]")]
	public partial class Table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _capital;
		
		private string _population;
		
		private string _largest_city;
		
		private string _bird;
		
		private string _flower;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncapitalChanging(string value);
    partial void OncapitalChanged();
    partial void OnpopulationChanging(string value);
    partial void OnpopulationChanged();
    partial void Onlargest_cityChanging(string value);
    partial void Onlargest_cityChanged();
    partial void OnbirdChanging(string value);
    partial void OnbirdChanged();
    partial void OnflowerChanging(string value);
    partial void OnflowerChanged();
    #endregion
		
		public Table()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_capital", DbType="VarChar(50)")]
		public string capital
		{
			get
			{
				return this._capital;
			}
			set
			{
				if ((this._capital != value))
				{
					this.OncapitalChanging(value);
					this.SendPropertyChanging();
					this._capital = value;
					this.SendPropertyChanged("capital");
					this.OncapitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_population", DbType="VarChar(50)")]
		public string population
		{
			get
			{
				return this._population;
			}
			set
			{
				if ((this._population != value))
				{
					this.OnpopulationChanging(value);
					this.SendPropertyChanging();
					this._population = value;
					this.SendPropertyChanged("population");
					this.OnpopulationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_largest_city", DbType="VarChar(50)")]
		public string largest_city
		{
			get
			{
				return this._largest_city;
			}
			set
			{
				if ((this._largest_city != value))
				{
					this.Onlargest_cityChanging(value);
					this.SendPropertyChanging();
					this._largest_city = value;
					this.SendPropertyChanged("largest_city");
					this.Onlargest_cityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bird", DbType="VarChar(50)")]
		public string bird
		{
			get
			{
				return this._bird;
			}
			set
			{
				if ((this._bird != value))
				{
					this.OnbirdChanging(value);
					this.SendPropertyChanging();
					this._bird = value;
					this.SendPropertyChanged("bird");
					this.OnbirdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flower", DbType="VarChar(50)")]
		public string flower
		{
			get
			{
				return this._flower;
			}
			set
			{
				if ((this._flower != value))
				{
					this.OnflowerChanging(value);
					this.SendPropertyChanging();
					this._flower = value;
					this.SendPropertyChanged("flower");
					this.OnflowerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
